//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MQTTClientForm.brokerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/brokerService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="brokerService.IBrokerService")]
    public interface IBrokerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBrokerService/GetDataUsingDataContractResponse")]
        MQTTClientForm.brokerService.CompositeType GetDataUsingDataContract(MQTTClientForm.brokerService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBrokerService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MQTTClientForm.brokerService.CompositeType> GetDataUsingDataContractAsync(MQTTClientForm.brokerService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTCreateClientAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTCreateClientAsyncResponse")]
        void MQTTCreateClientAsync(string mqttIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTCreateClientAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTCreateClientAsyncResponse")]
        System.Threading.Tasks.Task MQTTCreateClientAsyncAsync(string mqttIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTConnectClientAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTConnectClientAsyncResponse")]
        void MQTTConnectClientAsync(string mqttIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTConnectClientAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTConnectClientAsyncResponse")]
        System.Threading.Tasks.Task MQTTConnectClientAsyncAsync(string mqttIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTSubscribeTopicAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTSubscribeTopicAsyncResponse")]
        void MQTTSubscribeTopicAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTSubscribeTopicAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTSubscribeTopicAsyncResponse")]
        System.Threading.Tasks.Task MQTTSubscribeTopicAsyncAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTUnsubscribeTopicAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTUnsubscribeTopicAsyncResponse")]
        void MQTTUnsubscribeTopicAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTUnsubscribeTopicAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTUnsubscribeTopicAsyncResponse")]
        System.Threading.Tasks.Task MQTTUnsubscribeTopicAsyncAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTPublishTopicAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTPublishTopicAsyncResponse")]
        void MQTTPublishTopicAsync(string topic, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/MQTTPublishTopicAsync", ReplyAction="http://tempuri.org/IBrokerService/MQTTPublishTopicAsyncResponse")]
        System.Threading.Tasks.Task MQTTPublishTopicAsyncAsync(string topic, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCCreateClient", ReplyAction="http://tempuri.org/IBrokerService/OPCCreateClientResponse")]
        void OPCCreateClient(string opcIP, bool securityCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCCreateClient", ReplyAction="http://tempuri.org/IBrokerService/OPCCreateClientResponse")]
        System.Threading.Tasks.Task OPCCreateClientAsync(string opcIP, bool securityCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCConnectClient", ReplyAction="http://tempuri.org/IBrokerService/OPCConnectClientResponse")]
        void OPCConnectClient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCConnectClient", ReplyAction="http://tempuri.org/IBrokerService/OPCConnectClientResponse")]
        System.Threading.Tasks.Task OPCConnectClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCSubscribeTopic", ReplyAction="http://tempuri.org/IBrokerService/OPCSubscribeTopicResponse")]
        void OPCSubscribeTopic();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCSubscribeTopic", ReplyAction="http://tempuri.org/IBrokerService/OPCSubscribeTopicResponse")]
        System.Threading.Tasks.Task OPCSubscribeTopicAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCUnsubscribeTopic", ReplyAction="http://tempuri.org/IBrokerService/OPCUnsubscribeTopicResponse")]
        void OPCUnsubscribeTopic();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/OPCUnsubscribeTopic", ReplyAction="http://tempuri.org/IBrokerService/OPCUnsubscribeTopicResponse")]
        System.Threading.Tasks.Task OPCUnsubscribeTopicAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBrokerServiceChannel : MQTTClientForm.brokerService.IBrokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BrokerServiceClient : System.ServiceModel.ClientBase<MQTTClientForm.brokerService.IBrokerService>, MQTTClientForm.brokerService.IBrokerService {
        
        public BrokerServiceClient() {
        }
        
        public BrokerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BrokerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrokerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrokerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MQTTClientForm.brokerService.CompositeType GetDataUsingDataContract(MQTTClientForm.brokerService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MQTTClientForm.brokerService.CompositeType> GetDataUsingDataContractAsync(MQTTClientForm.brokerService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void MQTTCreateClientAsync(string mqttIP, int option) {
            base.Channel.MQTTCreateClientAsync(mqttIP, option);
        }
        
        public System.Threading.Tasks.Task MQTTCreateClientAsyncAsync(string mqttIP, int option) {
            return base.Channel.MQTTCreateClientAsyncAsync(mqttIP, option);
        }
        
        public void MQTTConnectClientAsync(string mqttIP, int option) {
            base.Channel.MQTTConnectClientAsync(mqttIP, option);
        }
        
        public System.Threading.Tasks.Task MQTTConnectClientAsyncAsync(string mqttIP, int option) {
            return base.Channel.MQTTConnectClientAsyncAsync(mqttIP, option);
        }
        
        public void MQTTSubscribeTopicAsync(string topic) {
            base.Channel.MQTTSubscribeTopicAsync(topic);
        }
        
        public System.Threading.Tasks.Task MQTTSubscribeTopicAsyncAsync(string topic) {
            return base.Channel.MQTTSubscribeTopicAsyncAsync(topic);
        }
        
        public void MQTTUnsubscribeTopicAsync(string topic) {
            base.Channel.MQTTUnsubscribeTopicAsync(topic);
        }
        
        public System.Threading.Tasks.Task MQTTUnsubscribeTopicAsyncAsync(string topic) {
            return base.Channel.MQTTUnsubscribeTopicAsyncAsync(topic);
        }
        
        public void MQTTPublishTopicAsync(string topic, string message) {
            base.Channel.MQTTPublishTopicAsync(topic, message);
        }
        
        public System.Threading.Tasks.Task MQTTPublishTopicAsyncAsync(string topic, string message) {
            return base.Channel.MQTTPublishTopicAsyncAsync(topic, message);
        }
        
        public void OPCCreateClient(string opcIP, bool securityCheck) {
            base.Channel.OPCCreateClient(opcIP, securityCheck);
        }
        
        public System.Threading.Tasks.Task OPCCreateClientAsync(string opcIP, bool securityCheck) {
            return base.Channel.OPCCreateClientAsync(opcIP, securityCheck);
        }
        
        public void OPCConnectClient() {
            base.Channel.OPCConnectClient();
        }
        
        public System.Threading.Tasks.Task OPCConnectClientAsync() {
            return base.Channel.OPCConnectClientAsync();
        }
        
        public void OPCSubscribeTopic() {
            base.Channel.OPCSubscribeTopic();
        }
        
        public System.Threading.Tasks.Task OPCSubscribeTopicAsync() {
            return base.Channel.OPCSubscribeTopicAsync();
        }
        
        public void OPCUnsubscribeTopic() {
            base.Channel.OPCUnsubscribeTopic();
        }
        
        public System.Threading.Tasks.Task OPCUnsubscribeTopicAsync() {
            return base.Channel.OPCUnsubscribeTopicAsync();
        }
    }
}
