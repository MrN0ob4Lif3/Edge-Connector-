//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MQTTClientForm.brokerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/brokerService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="brokerService.IbrokerService")]
    public interface IbrokerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/GetData", ReplyAction="http://tempuri.org/IbrokerService/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/GetData", ReplyAction="http://tempuri.org/IbrokerService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IbrokerService/GetDataUsingDataContractResponse")]
        MQTTClientForm.brokerService.CompositeType GetDataUsingDataContract(MQTTClientForm.brokerService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IbrokerService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MQTTClientForm.brokerService.CompositeType> GetDataUsingDataContractAsync(MQTTClientForm.brokerService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/CreateClientAsync", ReplyAction="http://tempuri.org/IbrokerService/CreateClientAsyncResponse")]
        void CreateClientAsync(string brokerIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/CreateClientAsync", ReplyAction="http://tempuri.org/IbrokerService/CreateClientAsyncResponse")]
        System.Threading.Tasks.Task CreateClientAsyncAsync(string brokerIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/ConnectClientAsync", ReplyAction="http://tempuri.org/IbrokerService/ConnectClientAsyncResponse")]
        void ConnectClientAsync(string brokerIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/ConnectClientAsync", ReplyAction="http://tempuri.org/IbrokerService/ConnectClientAsyncResponse")]
        System.Threading.Tasks.Task ConnectClientAsyncAsync(string brokerIP, int option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/SubscribeTopicAsync", ReplyAction="http://tempuri.org/IbrokerService/SubscribeTopicAsyncResponse")]
        void SubscribeTopicAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/SubscribeTopicAsync", ReplyAction="http://tempuri.org/IbrokerService/SubscribeTopicAsyncResponse")]
        System.Threading.Tasks.Task SubscribeTopicAsyncAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/UnsubscribeTopicAsync", ReplyAction="http://tempuri.org/IbrokerService/UnsubscribeTopicAsyncResponse")]
        void UnsubscribeTopicAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/UnsubscribeTopicAsync", ReplyAction="http://tempuri.org/IbrokerService/UnsubscribeTopicAsyncResponse")]
        System.Threading.Tasks.Task UnsubscribeTopicAsyncAsync(string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/PublishTopicAsync", ReplyAction="http://tempuri.org/IbrokerService/PublishTopicAsyncResponse")]
        void PublishTopicAsync(string topic, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IbrokerService/PublishTopicAsync", ReplyAction="http://tempuri.org/IbrokerService/PublishTopicAsyncResponse")]
        System.Threading.Tasks.Task PublishTopicAsyncAsync(string topic, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IbrokerServiceChannel : MQTTClientForm.brokerService.IbrokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IbrokerServiceClient : System.ServiceModel.ClientBase<MQTTClientForm.brokerService.IbrokerService>, MQTTClientForm.brokerService.IbrokerService {
        
        public IbrokerServiceClient() {
        }
        
        public IbrokerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IbrokerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IbrokerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IbrokerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MQTTClientForm.brokerService.CompositeType GetDataUsingDataContract(MQTTClientForm.brokerService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MQTTClientForm.brokerService.CompositeType> GetDataUsingDataContractAsync(MQTTClientForm.brokerService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void CreateClientAsync(string brokerIP, int option) {
            base.Channel.CreateClientAsync(brokerIP, option);
        }
        
        public System.Threading.Tasks.Task CreateClientAsyncAsync(string brokerIP, int option) {
            return base.Channel.CreateClientAsyncAsync(brokerIP, option);
        }
        
        public void ConnectClientAsync(string brokerIP, int option) {
            base.Channel.ConnectClientAsync(brokerIP, option);
        }
        
        public System.Threading.Tasks.Task ConnectClientAsyncAsync(string brokerIP, int option) {
            return base.Channel.ConnectClientAsyncAsync(brokerIP, option);
        }
        
        public void SubscribeTopicAsync(string topic) {
            base.Channel.SubscribeTopicAsync(topic);
        }
        
        public System.Threading.Tasks.Task SubscribeTopicAsyncAsync(string topic) {
            return base.Channel.SubscribeTopicAsyncAsync(topic);
        }
        
        public void UnsubscribeTopicAsync(string topic) {
            base.Channel.UnsubscribeTopicAsync(topic);
        }
        
        public System.Threading.Tasks.Task UnsubscribeTopicAsyncAsync(string topic) {
            return base.Channel.UnsubscribeTopicAsyncAsync(topic);
        }
        
        public void PublishTopicAsync(string topic, string message) {
            base.Channel.PublishTopicAsync(topic, message);
        }
        
        public System.Threading.Tasks.Task PublishTopicAsyncAsync(string topic, string message) {
            return base.Channel.PublishTopicAsyncAsync(topic, message);
        }
    }
}
